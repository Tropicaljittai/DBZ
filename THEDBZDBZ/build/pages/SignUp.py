
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage

import pages.database as database
from tkinter import ttk
import bcrypt
from tkinter import messagebox
import tkinter as tk

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"C:\Users\Franz\Documents\THEDBZDBZ\build\assets\frame11")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)



class SignUp(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller
        self.configure(bg = "#FFFFFF")


        canvas = Canvas(
            self,
            bg = "#FFFFFF",
            height = 778,
            width = 1440,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )

        canvas.place(x = 0, y = 0)
        canvas.create_text(
            776.0,
            112.0,
            anchor="nw",
            text="Join Us",
            fill="#F94444",
            font=("Poppins SemiBold", 56 * -1)
        )

        canvas.create_text(
            793.0,
            220.0,
            anchor="nw",
            text="Email",
            fill="#1E1E1E",
            font=("ArialRoundedMTBold", 15 * -1)
        )

        self.entry_image_1 = PhotoImage(
            file=relative_to_assets("entry_1.png"))
        entry_bg_1 = canvas.create_image(
            996.5,
            262.0,
            image=self.entry_image_1
        )
        Email = Entry(
            bd=0,
            bg="#C8C8C8",
            fg="#000716",
            highlightthickness=0
        )
        Email.place(
            x=801.0,
            y=242.0,
            width=391.0,
            height=38.0
        )


        canvas.create_text(
            792.0,
            296.0,
            anchor="nw",
            text="Company Name",
            fill="#1E1E1E",
            font=("ArialRoundedMTBold", 15 * -1)
        )

        self.entry_image_2 = PhotoImage(
            file=relative_to_assets("entry_2.png"))
        entry_bg_2 = canvas.create_image(
            996.5,
            338.0,
            image=self.entry_image_2
        )
        Name = Entry(
            bd=0,
            bg="#C8C8C8",
            fg="#000716",
            highlightthickness=0
        )
        Name.place(
            x=801.0,
            y=318.0,
            width=391.0,
            height=38.0
        )


        canvas.create_text(
            791.0,
            376.0,
            anchor="nw",
            text="Password",
            fill="#1E1E1E",
            font=("ArialRoundedMTBold", 15 * -1)
        )

        canvas.create_text(
            791.0,
            451.0,
            anchor="nw",
            text="Address",
            fill="#1E1E1E",
            font=("ArialRoundedMTBold", 15 * -1)
        )

        canvas.create_text(
            791.0,
            537.0,
            anchor="nw",
            text="Business Type",
            fill="#1E1E1E",
            font=("ArialRoundedMTBold", 15 * -1)
        )
        style = ttk.Style(self)
        style.theme_use('clam')  # Using a theme that allows color customization

        # Configure the combobox background color
        style.configure("TCombobox", fieldbackground="grey", background="grey")
        style.map("TCombobox", fieldbackground=[("readonly", "red")], selectbackground=[("readonly", "red")], selectforeground=[("readonly", "red")])

        # Sample data for the combobox
        values = ["Seller", "Supplier"]

        # Create a combobox
        combobox = ttk.Combobox(self, values=values,width=38,height= 38.0)
        combobox.place(x=791.0,y=557.0)

        def hash_password(password):
            # Hash a password for the first time
            # (Using bcrypt, the salt is saved into the hash itself)
            hashed = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())
            return hashed
        self.entry_image_3 = PhotoImage(
            file=relative_to_assets("entry_3.png"))
        entry_bg_3 = canvas.create_image(
            996.5,
            419.0,
            image=self.entry_image_3
        )
        Password= Entry(
            bd=0,
            bg="#C8C8C8",
            fg="#000716",
            highlightthickness=0,
            show ="*"
        )


        Password.place(
            x=801.0,
            y=399.0,
            width=391.0,
            height=38.0
        )


        self.entry_image_4 = PhotoImage(
            file=relative_to_assets("entry_4.png"))
        entry_bg_4 = canvas.create_image(
            996.5,
            494.0,
            image=self.entry_image_4
        )
        entry_4 = Entry(
            bd=0,
            bg="#C8C8C8",
            fg="#000716",
            highlightthickness=0
        )
        entry_4.place(
            x=801.0,
            y=474.0,
            width=391.0,
            height=38.0
        )

        self.image_image_1 = PhotoImage(
            file=relative_to_assets("image_1.png"))
        image_1 = canvas.create_image(
            360.0,
            389.0,
            image=self.image_image_1
        )

        self.button_image_1 = PhotoImage(
            file=relative_to_assets("button_1.png"))
        button_1 = Button(
            image=self.button_image_1,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_1 clicked"),
            relief="flat"
        )
        button_1.place(
            x=722.0,
            y=35.0,
            width=67.0,
            height=47.0
        )

        def on_submit(self):
            user_email = Email.get()
            if database.email_exists(user_email):
                messagebox.showwarning("Email taken!! Please use a different email.")
                return
            hashed_password = hash_password(Password.get())
            
            if database.insert_user(Name.get(), hashed_password, combobox.get(), user_email, "-", "-", "-", "-", "-"):
                messagebox.showinfo("Success", "Account created successfully.")
            else:
                messagebox.showerror("Error", "Failed to create an account.")

        self.button_image_2 = PhotoImage(
            file=relative_to_assets("button_2.png"))
        button_2 = Button(
            image=self.button_image_2,
            borderwidth=0,
            highlightthickness=0,
            command=on_submit,
            relief="flat"
        )
        button_2.place(
            x=774.0,
            y=628.0,
            width=176.00006103515625,
            height=79.0
        )

        def toggle_password():
            if Password.cget('show') == '*':
                Password.config(show='') 
            else:
                Password.config(show='*')

        self.button_image_3 = PhotoImage(
            file=relative_to_assets("button_3.png"))
        button_3 = Button(
            image=self.button_image_3,
            borderwidth=0,
            highlightthickness=0,
            command=toggle_password,
            relief="flat"
        )
        button_3.place(
            x=1207.0,
            y=396.0,
            width=51.0,
            height=45.0
        )
      




